[tool.poetry]
name = "renamer"
version = "0.1.4"
description = "cli to help with renaming original ingested files with missing or wrong extension"
authors = ["Claus Juhl Knudsen <cjk@aarhus.dk>"]

[tool.poetry.dependencies]
python = ">=3.8, <=3.11"
xmltodict = "^0.13.0"
requests = "^2.28.1"

[tool.poetry.scripts]
renamer = 'renamer.cli:main'

[tool.poetry.group.dev.dependencies]
black = "^23.9.1"
ruff = "^0.0.292"
mypy = "^1.6.0"

[tool.black]
line-length = 110

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
disable_error_code = "misc"
# Because we disallow untyped defs in convertool,
# check_untyped_defs only has an impact in tests/
check_untyped_defs = true

[tool.mypy-.venv.'*']
ignore_errors = true

[tool.ruff]
select = [
    "C",
    "E",
    "F",
    "W",
   # "B", #TODO: Introduce this check. Will ask for some refactoring of error handling
    "I",
   # "C90", Checks for complexity, might be good but not essential
   # "N", #TODO: Introduce this check. Will force us to redo the naming of several functions
    "D",
    "UP",
    "YTT",
    "ANN",
   # "S", #TODO: Introduce this check. Will help us have secure calls to sub.process and such
    "BLE",
   # "FBT", #TODO: Introduce this check. Will asks us to remove boolean flags
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "ISC",
    "ICN",
    "INP",
    "PIE",
    "PT",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "ARG",
    "PLE",
   # "PLR", #TODO: Introduce this check. Will suggest several large refactoring
    "PLW",
   # "TRY", #TODO: Introduce this check. Will help with our exception handling
    "RUF"
    ]
ignore = [
    "ANN002", # missing type anottation for *args
    "ANN003", # missing type anotation for **kwargs
    "ANN101", # missing type for self
    "ANN102", # missing type for cls
    "ANN201", # missing return type
    "ANN202", # missing return type
    "ANN206", # missing return type
    "ARG001", # missing type anotattion for args
    "BLE001", # catching general exceptions
    "D100", # missing docstring
    "D101", # missing docstring
    "D102", # missing docstring
    "D103", # missing docstring,
    "D104", # missing docstring,
    "D105", # missing docstring in magic method,
    "D106", # missing docstring in nested class,
    "D107", # missing docstring in __init__,
    "D203", # 0 blank line required before class docstring,
    "D204", # 1 blank line required after class docstring,
    "D212", # multi-line docstring summary should start at the first line,
    "D213", # multi-line docstring summary should start at the second line,
    "D300", # use triple docstring
    "E712", # comparison to True/False, we ignore because we use sqlalchemy
    "FBT001", # boolean arguement in function definition
    "N802", # name of function should be lower case
    "PLR2004", # magic value used in comparison
    "PT012", # ptest.raises should contain a simple statement
    "RET505", # unnecessary {branch} after return statement
    "S101", # use of assert,
    "TRY003", # avoid using long messages outside exception class
    "UP007", # not using | in type anotations
    "INP001", # implicit namespace without __init__ (throws errors in tests)
    "PLW2901", # redefing loop variables
    "C901", # complexity check
    "ISC001", # check for implicit concatanation of str on one line, not compatabil with black.
    ]
line-length = 110
exclude = [
    ".venv",
    "env",
    "venv",
    ".git",
    "__pycache__",
    ".github",
    ".mypy_cache",
    ".pytest_cache",
    ]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
